path_normalize_factor :  ../temp/normalize_factors.p
/home/wisrl/anaconda3/envs/imu_38/lib/python3.8/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
path_normalize_factor :  ../temp/normalize_factors.p
dataset_train_filter_keys :  odict_keys(['merged_output_py_bias_2'])
dataset_list_rpe_keys :  dict_keys(['merged_output_py_bias_2', 'merged_output_py_bias_3'])
The IEKF nets are saved in the file ../temp/iekfnets.p
start time :  1727989526.4975107
/home/wisrl/anaconda3/envs/imu_38/lib/python3.8/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
N :  1000 N0 :  520
clip length:  tensor(36) 2796
precompute lost 24 59
min seq : 2, max seq : 8
loss 0 : 14.924400417183806
0 loss: 14.92440[0m
[33mgradient norm: 90.36010[0m
Train Epoch:  1 	Loss: 14.92440
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 1 epoch: 7s

N :  1000 N0 :  30630
clip length:  tensor(37) 2796
precompute lost 1228 1264
min seq : 2, max seq : 8
loss 0 : 0.3305469857643511
0 loss: 0.33055[0m
gradient norm: 1.38605[0m
Train Epoch:  2 	Loss: 0.33055
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 2 epoch: 5s

N :  1000 N0 :  46200
clip length:  tensor(40) 2796
precompute lost 1848 1887
min seq : 2, max seq : 8
loss 0 : 0.10876846220098883
0 loss: 0.10877[0m
gradient norm: 0.60862[0m
Train Epoch:  3 	Loss: 0.10877
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 3 epoch: 5s

N :  1000 N0 :  29580
clip length:  tensor(40) 2796
precompute lost 1184 1223
min seq : 2, max seq : 8
loss 0 : 0.16712320284432625
0 loss: 0.16712[0m
gradient norm: 1.29693[0m
Train Epoch:  4 	Loss: 0.16712
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 4 epoch: 5s

N :  1000 N0 :  10120
clip length:  tensor(36) 2796
precompute lost 408 443
min seq : 2, max seq : 15
loss 0 : 4.287577807870566
0 loss: 4.28758[0m
[33mgradient norm: 26.79730[0m
Train Epoch:  5 	Loss: 4.28758
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 5 epoch: 5s

N :  1000 N0 :  42510
clip length:  tensor(36) 2796
precompute lost 1704 1739
min seq : 2, max seq : 12
loss 0 : 0.2597693949859785
0 loss: 0.25977[0m
gradient norm: 0.51702[0m
Train Epoch:  6 	Loss: 0.25977
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 6 epoch: 5s

N :  1000 N0 :  24490
clip length:  tensor(39) 2796
precompute lost 980 1018
min seq : 2, max seq : 17
loss 0 : 0.3061946654346432
0 loss: 0.30619[0m
gradient norm: 0.78610[0m
Train Epoch:  7 	Loss: 0.30619
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 7 epoch: 5s

N :  1000 N0 :  17290
clip length:  tensor(38) 2796
precompute lost 692 729
min seq : 2, max seq : 15
loss 0 : 1.233979716120186
0 loss: 1.23398[0m
[33mgradient norm: 9.02076[0m
Train Epoch:  8 	Loss: 1.23398
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 8 epoch: 5s

N :  1000 N0 :  42990
clip length:  tensor(40) 2796
precompute lost 1720 1759
min seq : 2, max seq : 12
loss 0 : 0.37715271238330056
0 loss: 0.37715[0m
gradient norm: 0.80267[0m
Train Epoch:  9 	Loss: 0.37715
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 9 epoch: 5s

N :  1000 N0 :  8570
clip length:  tensor(40) 2796
precompute lost 344 383
min seq : 2, max seq : 7
loss 0 : 0.8251135821972655
0 loss: 0.82511[0m
[33mgradient norm: 4.06518[0m
Train Epoch: 10 	Loss: 0.82511
The IEKF nets are saved in the file ../temp/iekfnets.p
Amount of time spent for 10 epoch: 5s

Validate filter
Traceback (most recent call last):
  File "main_usv.py", line 363, in <module>
    launch(args)  # 'args' Í∞ùÏ≤¥Î•º Ï†ÑÎã¨
  File "main_usv.py", line 28, in launch
    train_filter(args, dataset)
  File "/home/wisrl/pjw/ai-imu/src/train_torch_filter.py", line 108, in train_filter
    test_loss = validate_filter(args, dataset, iekf, args.seq_dim)
  File "/home/wisrl/pjw/ai-imu/src/train_torch_filter.py", line 117, in validate_filter
    for i, (dataset_name, Ns) in enumerate(dataset.datasets_validation_filter.items()):
AttributeError: 'USVDataset' object has no attribute 'datasets_validation_filter'
